-- Function: public._crm_nieuweleden(date)

-- DROP FUNCTION public._crm_nieuweleden(date);

CREATE OR REPLACE FUNCTION public._crm_nieuweleden(
    IN v_startdatum date,
    OUT id integer,
    OUT datum_toegevoegd date,
    OUT type_lid text,
    OUT lidnummer character varying,
    OUT aanmaakdatum date,
    OUT lidkaart text,
    OUT date_welkomstpakket date,
    OUT welkomstpakket text,
    OUT tijdschrift1 character varying,
    OUT tijdschrift2 character varying,
    OUT herkomst character varying,
    OUT status character varying,
    OUT einddatum date,
    OUT productid text,
    OUT name text,
    OUT adres text,
    OUT street character varying,
    OUT street_number character varying,
    OUT box_number character varying,
    OUT postal_code character varying,
    OUT city character varying,
    OUT country text,
    OUT sender_name text,
    OUT sender_contact_name text,
    OUT sender_street text,
    OUT sender_street_number text,
    OUT sender_box_number text,
    OUT sender_postal_code text,
    OUT sender_city text)
  RETURNS SETOF record AS
$BODY$
DECLARE v_lidnummer TEXT;

BEGIN

	SELECT MIN(membership_nbr) membership_nbr FROM res_partner p WHERE create_date::date = v_startdatum INTO v_lidnummer;
	-----------------------------------
	RETURN QUERY

	SELECT p.id,
		now()::date as datum_toevoeging,
		CASE WHEN n."1-5J" > 0 THEN '1-5j'
			WHEN n."5J" > 0 THEN '5j'
			WHEN n.V > 0 THEN 'V'
			WHEN n.O1 > 0 THEN 'O1'
			WHEN n.O2 > 0 THEN 'O2'
			WHEN n.G > 0 THEN 'G'
			WHEN n.N_d > 0 THEN 'N_d'
			WHEN n.N_a > 0 THEN 'N_a'
			ELSE 'N' END type_lid,

		p.membership_nbr, 
		p.create_date::date,
		CASE WHEN p.lidkaart THEN 'WAAR' ELSE 'ONWAAR' END lidkaart,
		p.date_welkomstpakket, 
		CASE WHEN p.welkomstpakket THEN 'WAAR' ELSE 'ONWAAR' END welkomstpakket,
		COALESCE(mm1.name,'') tijdschrift_1,
		COALESCE(mm2.name,'') tijdschrift_2,
		mo.name herkomst_lidmaatschap,
		p.membership_state huidige_lidmaatschap_status,
		p.membership_stop einddatum,

		'BUS' as productid,
		CASE WHEN p.first_name = '' THEN p.last_name ELSE p.first_name||' '||p.last_name END "name",
		sq2.straat || CASE WHEN sq2.huisnummer = '' THEN '' ELSE ' '||sq2.huisnummer END || CASE WHEN sq2.bus = '' THEN '' ELSE '/'||sq2.bus END as adres,

		sq2.straat as street,
		sq2.huisnummer as street_number,
		sq2.bus as box_number,
		sq2.postcode as postal_code,
		sq2.woonplaats as city,
		sq2.land as country,

		'Natuurpunt' as Sender_Name, 
		'' as Sender_Contact_Name,
		'Coxiestraat' as Sender_Street, 
		'11' as Sender_Street_Number, 
		'' as Sender_Box_Number, 
		'2800' as Sender_Postal_Code, 
		'Mechelen' as Sender_City

	FROM res_partner p 
		JOIN (SELECT sq1.id as partner_id, SUM(N) N, SUM(N_d) N_d, SUM(N_a) N_a, SUM(G) G, SUM(O1) O1, SUM("5J") "5J", SUM("1-5J") "1-5J", SUM(V) V, SUM(O2) O2 
			FROM 
			(
				-- N -- nieuwe leden
				SELECT p.id, 1 N, 0 N_d, 0 N_a, 0 G, 0 O1, 0 "5J", 0 "1-5J", 0 V, 0 O2
				FROM res_partner p
					JOIN membership_membership_line ml ON ml.partner = p.id
					JOIN product_product pp ON pp.id = ml.membership_id
				WHERE 	pp.membership_product 
					AND (membership_nbr::numeric >=  v_lidnummer::numeric AND (NOT(membership_start IS NULL)) OR (membership_nbr::numeric >=  v_lidnummer::numeric AND free_member))
			UNION ALL
			-------------------------------
			-- N_d -- nieuwe leden met domi
				SELECT sq1.id, 0 N, 1 N_d, 0 N_a, 0 G, 0 O1, 0 "5J", 0 "1-5J", 0 V, 0 O2
				FROM _crm_ledenmetdomi( v_lidnummer, v_startdatum) sq1
				WHERE NOT (sq1.id IN (SELECT sq2.id FROM _crm_ledenviaafdeling( v_lidnummer, v_startdatum  ) sq2 ))
			UNION ALL
			--------------------------------------	 
			-- N_a -- nieuwe leden via de afdeling
				SELECT sq1.id, 0 N, 0 N_d, 1 N_a, 0 G, 0 O1, 0 "5J", 0 "1-5J", 0 V, 0 O2 
				FROM _crm_ledenviaafdeling( v_lidnummer, v_startdatum) sq1
			UNION ALL
			---------------------------------------
			-- G -- "gratis" nieuwe leden toevoegen
				SELECT p.id, 0 N, 0 N_d, 0 N_a, 1 G, 0 O1, 0 "5J", 0 "1-5J", 0 V, 0 O2
				FROM res_partner p
				WHERE p.free_member AND p.active AND p.create_date::date >  v_startdatum 	
					AND p.id = 328767
			UNION ALL
			--------------------------------------------------------------------------
			-- O1 -- nieuwe leden met oud lidnummer die pas recent betaalden toevoegen 
				SELECT p.id, 0 N, 0 N_d, 0 N_a, 0 G, 1 O1, 0 "5J", 0 "1-5J", 0 V, 0 O2
				FROM res_partner p
					JOIN membership_membership_line ml ON ml.partner = p.id
					JOIN product_product pp ON pp.id = ml.membership_id
					--bank/mandaat info
					--door bank aan mandaat te linken en enkel de mandaat info te nemen ontdubbeling veroorzaakt door meerdere bankrekening nummers
					LEFT OUTER JOIN (SELECT pb.id pb_id, pb.partner_id pb_partner_id, sm.id sm_id, sm.state sm_state FROM res_partner_bank pb JOIN sdd_mandate sm ON sm.partner_bank_id = pb.id WHERE sm.state = 'valid') sm ON pb_partner_id = p.id
					--facturen info
					LEFT OUTER JOIN account_invoice_line il ON il.id = ml.account_invoice_line
					LEFT OUTER JOIN account_invoice i ON i.id = il.invoice_id
					--parnter info
					LEFT OUTER JOIN res_partner a3 ON i.partner_id = a3.id
				WHERE pp.membership_product
					AND p.membership_nbr::numeric < v_lidnummer::numeric  
					AND p.membership_pay_date >=  v_startdatum
					AND date_part('year',age(p.membership_stop, p.membership_start)) <= 0
					AND NOT(p.membership_start IS NULL)
					AND NOT (p.id IN (SELECT sq1.id FROM _crm_ledenviaafdeling( v_lidnummer, v_startdatum  ) sq1 ))
					AND NOT (p.id IN (SELECT sq2.id FROM _crm_ledenmetdomi( v_lidnummer, v_startdatum  ) sq2 ))
					AND NOT (p.id IN (SELECT sq3.id FROM _crm_ledenviateinnenoverschrijving( v_lidnummer, v_startdatum ) sq3 ))
					AND COALESCE(sm.pb_partner_id,0) = 0
					AND NOT(COALESCE(i.partner_id,0) <> 0 AND COALESCE(a3.organisation_type_id,0) = 1 )	
			UNION ALL
			----------------------------------------------------
			-- 5j -- leden die langer dan 5j geen lid meer waren
				SELECT p.id, 0 N, 0 N_d, 0 N_a, 0 G, 0 O1, 1 "5J", 0 "1-5J", 0 V, 0 O2 
				FROM _crm_leden5j(v_lidnummer,v_startdatum) p
					JOIN membership_membership_line ml ON ml.partner = p.id
					JOIN product_product pp ON pp.id = ml.membership_id
					--bank/mandaat info
					--door bank aan mandaat te linken en enkel de mandaat info te nemen ontdubbeling veroorzaakt door meerdere bankrekening nummers
					LEFT OUTER JOIN (SELECT pb.id pb_id, pb.partner_id pb_partner_id, sm.id sm_id, sm.state sm_state FROM res_partner_bank pb JOIN sdd_mandate sm ON sm.partner_bank_id = pb.id WHERE sm.state = 'valid') sm ON pb_partner_id = p.id
					--facturen info
					LEFT OUTER JOIN account_invoice_line il ON il.id = ml.account_invoice_line
					LEFT OUTER JOIN account_invoice i ON i.id = il.invoice_id
					--parnter info
					LEFT OUTER JOIN res_partner a3 ON i.partner_id = a3.id
				WHERE (COALESCE(sm.pb_partner_id,0) = 0 OR COALESCE(sm.pb_partner_id,0) > 0 AND ml.date >= v_startdatum) 
					--domi's niet meenemen behalve als ze binnen deze periode vallen (toegevoegd vanaf v_startdatum)
					AND (NOT(COALESCE(i.partner_id,0) <> 0 AND COALESCE(a3.organisation_type_id,0) = 1 ) OR COALESCE(i.partner_id,0) <> 0 AND COALESCE(a3.organisation_type_id,0) = 1 AND ml.date >= v_startdatum)
					--leden via afdeling niet meenemen behalve als ze binnen deze periode vallen (toegevoegd vanaf v_startdatum)
					AND p.check_date < now()::date
					--AND p.id = 263165
			UNION ALL
			-------------------------------------------------
			-- 1-5j -- leden die 1 tot 5j geen lid meer waren
				SELECT p.id, 0 N, 0 N_d, 0 N_a, 0 G, 0 O1, 0 "5J", 1 "1-5J", 0 V, 0 O2 
				FROM _crm_leden1tot5j(v_lidnummer,v_startdatum) p
					JOIN membership_membership_line ml ON ml.partner = p.id
					JOIN product_product pp ON pp.id = ml.membership_id
					--bank/mandaat info
					--door bank aan mandaat te linken en enkel de mandaat info te nemen ontdubbeling veroorzaakt door meerdere bankrekening nummers
					LEFT OUTER JOIN (SELECT pb.id pb_id, pb.partner_id pb_partner_id, sm.id sm_id, sm.state sm_state FROM res_partner_bank pb JOIN sdd_mandate sm ON sm.partner_bank_id = pb.id WHERE sm.state = 'valid') sm ON pb_partner_id = p.id
					--facturen info
					LEFT OUTER JOIN account_invoice_line il ON il.id = ml.account_invoice_line
					LEFT OUTER JOIN account_invoice i ON i.id = il.invoice_id
					--parnter info
					LEFT OUTER JOIN res_partner a3 ON i.partner_id = a3.id
				WHERE (COALESCE(sm.pb_partner_id,0) = 0 OR COALESCE(sm.pb_partner_id,0) > 0 AND ml.date >= v_startdatum) 
					--domi's niet meenemen behalve als ze binnen deze periode vallen (toegevoegd vanaf v_startdatum)
					AND (NOT(COALESCE(i.partner_id,0) <> 0 AND COALESCE(a3.organisation_type_id,0) = 1 ) OR COALESCE(i.partner_id,0) <> 0 AND COALESCE(a3.organisation_type_id,0) = 1 AND ml.date >= v_startdatum)
					--leden via afdeling niet meenemen behalve als ze binnen deze periode vallen (toegevoegd vanaf v_startdatum)
					AND p.check_date < now()::date
					--AND p.id = 139317
			UNION ALL
			----------------------------------------------------------------------------------------------------------------
			-- V -- nieuwe leden die later gevalideerd werden (kleiner v_lidnummer, maar wel gevalideerd na de v_startdatum)
				SELECT p.id, 0 N, 0 N_d, 0 N_a, 0 G, 0 O1, 0 "5J", 0 "1-5J", 1 V, 0 O2 
				FROM _crm_ledennieuwlatergevalideerd( v_lidnummer,v_startdatum) p
					JOIN membership_membership_line ml ON ml.partner = p.id
					JOIN product_product pp ON pp.id = ml.membership_id
					--bank/mandaat info
					--door bank aan mandaat te linken en enkel de mandaat info te nemen ontdubbeling veroorzaakt door meerdere bankrekening nummers
					LEFT OUTER JOIN (SELECT pb.id pb_id, pb.partner_id pb_partner_id, sm.id sm_id, sm.state sm_state FROM res_partner_bank pb JOIN sdd_mandate sm ON sm.partner_bank_id = pb.id WHERE sm.state = 'valid') sm ON pb_partner_id = p.id
					--facturen info
					LEFT OUTER JOIN account_invoice_line il ON il.id = ml.account_invoice_line
					LEFT OUTER JOIN account_invoice i ON i.id = il.invoice_id
					--parnter info
					LEFT OUTER JOIN res_partner a3 ON i.partner_id = a3.id
				WHERE NOT (p.id IN (SELECT sq1.id FROM _crm_leden1tot5j( v_lidnummer,v_startdatum) sq1 ))
					AND NOT (p.id IN (SELECT sq2.id FROM _crm_leden5j(v_lidnummer,v_startdatum) sq2 ))
					AND NOT (p.id IN (SELECT sq3.id FROM _crm_ledenviaafdeling( v_lidnummer, v_startdatum  ) sq3 ))
					AND NOT (p.id IN (SELECT sq4.id FROM _crm_ledenmetdomi( v_lidnummer, v_startdatum  ) sq4 ))
					AND COALESCE(sm.pb_partner_id,0) = 0
					AND NOT(COALESCE(i.partner_id,0) <> 0 AND COALESCE(a3.organisation_type_id,0) = 1 )
			UNION ALL	
			-----------------------------------
			-- O2 -- oude partner_id, nieuw lid
				SELECT sq1.id, 0 N, 0 N_d, 0 N_a, 0 G, 0 O1, 0 "5J", 0 "1-5J", 0 V, 1 O2 FROM _crm_ledenoudepartnernieuwlid( v_lidnummer,v_startdatum) sq1 WHERE check_date < now()::date
					--WHERE NOT (id IN (SELECT id FROM _crm_ledennieuwlatergevalideerd( v_lidnummer,v_startdatum)))	
			) sq1



			
			GROUP BY sq1.id) n ON n.partner_id = p.id
		JOIN _crm_partnerinfo() sq2 ON sq2.partner_id = p.id
		--herkomst
		LEFT OUTER JOIN res_partner_membership_origin mo ON p.membership_origin_id = mo.id
		--tijdschrift 1 en/of - 2
		LEFT OUTER JOIN mailing_mailing mm1 ON p.periodical_1_id = mm1.id
		LEFT OUTER JOIN mailing_mailing mm2 ON p.periodical_2_id = mm2.id
	WHERE NOT (p.id IN (SELECT sq1.id FROM _crm_ledenmetinactievedubbel() sq1 ))
		AND COALESCE(p.lidkaart,'false') = 'false'
		AND COALESCE(p.create_date::date,p.membership_start) <  now()::date
		AND NOT(p.membership_state = 'wait_member')
		AND NOT(p.membership_state = 'canceled')
		AND NOT(p.membership_state = 'none')
		AND p.active;
	
	--DROP TABLE _AV_tempIDs_nieuweleden;
	--SELECT p.id, p.membership_nbr, v_startdatum, v_lidnummer FROM res_partner p WHERE create_date::date >= v_startdatum;
	 
END; 
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION public._crm_nieuweleden(date)
  OWNER TO axelvandencamp;
GRANT EXECUTE ON FUNCTION public._crm_nieuweleden(date) TO public;
GRANT EXECUTE ON FUNCTION public._crm_nieuweleden(date) TO axelvandencamp;
GRANT EXECUTE ON FUNCTION public._crm_nieuweleden(date) TO readonly;
