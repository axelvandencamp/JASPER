-- Function: _crm_ledennieuwlatergevalideerd(text, date)

-- DROP FUNCTION _crm_ledennieuwlatergevalideerd(text, date);

CREATE OR REPLACE FUNCTION _crm_ledennieuwlatergevalideerd(
    IN lidnummer text,
    IN begindatum date,
    OUT bs_name character varying,
    OUT bs_state character varying,
    OUT bs_write_date date,
    OUT bsl_write_date date,
    OUT id integer,
    OUT startdatum date,
    OUT date_from date,
    OUT lidnr character varying,
    OUT bsl_write_uid integer,
    OUT r_max bigint)
  RETURNS SETOF record AS
$BODY$
BEGIN
	RETURN QUERY 
	SELECT bs.name, bs.state, bs.write_date::date bs_date, bsl.write_date::date bsl_date, p.id, p.membership_start, SQ2.date_from, p.membership_nbr, bsl.write_uid, SQ2.r_max
	FROM 	-------------------------------------------
		-- SQ2: MAX(r) voor total_rows() te krijgen
		-------------------------------------------
		(SELECT SQ1.partner_id, MAX(SQ1.id) ml_id, MAX(SQ1.date_from) date_from, MIN(SQ1.date_to) date_to, 
			date_part('year',age(MIN(SQ1.date_to), MAX(SQ1.date_from))) datediff, 
			date_part('month',age(MIN(SQ1.date_to), MAX(SQ1.date_from))) datediff_m,
			MAX(r) r_max
		FROM (
			------------------------------------------------------------------------------------
			-- SQ1: geldige lidmaatschapslijn selecteren op basis van factuur/boeking en product
			------------------------------------------------------------------------------------
			SELECT i.membership_partner_id partner_id, ml.id, ml.date_from, ml.date_to, pp.membership_product, i.state, /*aml.statement_id,*/ ROW_NUMBER() OVER (PARTITION BY ml.partner ORDER BY ml.id DESC) AS r	
			--SELECT ml.id ml_id, ml.membership_id ml_membership_id, pp.id pp_id, il.id il_id, ml.account_invoice_line ml_account_invoice_line, i.id i_id, il.invoice_id il_invoice_id, am.id am_id, i.move_id i_move_id, i.state i_state--, am.id am_id, aml.move_id aml_move_id--, il.product_id il_product_id, pp.id pp_id
			FROM membership_membership_line ml
				--factuur info
				JOIN account_invoice_line il ON il.id = ml.account_invoice_line
				JOIN account_invoice i ON i.id = il.invoice_id
				--boeking info
				JOIN account_move_line aml1 ON aml1.move_id = i.move_id
				JOIN account_move_line aml2 ON aml2.reconcile_id = aml1.reconcile_id
				--RU
				JOIN account_bank_statement bs ON bs.id = aml2.statement_id
				--product info
				JOIN product_product pp ON pp.id = ml.membership_id
			WHERE pp.membership_product  AND i.state = 'paid'
			--AND ml.partner IN (299116)
			--------------------------------------------------------------- SQ1 -
			) SQ1
		WHERE SQ1.r <= 2
		GROUP BY SQ1.partner_id) SQ2
		------------------------------------- SQ2 -
		JOIN membership_membership_line ml ON ml.id = SQ2.ml_id	
		JOIN res_partner p ON p.id = ml.partner
		JOIN account_bank_statement_line bsl ON p.id = bsl.partner_id 
		JOIN account_bank_statement bs ON bs.id = bsl.statement_id 	
	WHERE bs.state = 'confirm' AND bs.name LIKE '%-221-%'
		AND date_part('month',age(bsl.write_date::date, SQ2.date_from))::numeric < 3 
		AND SQ2.date_from < begindatum AND bsl.write_date::date >= begindatum
		AND (SQ2.r_max = 1);
		-- OR (SQ2.r_max > 1 AND (datediff_m <= -9 OR datediff <= -1))); 
	 
END; 
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION _crm_ledennieuwlatergevalideerd(text, date)
  OWNER TO odbcreadonly;
