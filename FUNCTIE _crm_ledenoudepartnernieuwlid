-- Function: public._crm_ledenoudepartnernieuwlid(text, date)

-- DROP FUNCTION public._crm_ledenoudepartnernieuwlid(text, date);

CREATE OR REPLACE FUNCTION public._crm_ledenoudepartnernieuwlid(
    IN lidnummer text,
    IN begindatum date,
    OUT id integer,
    OUT create_date date,
    OUT lidmaatschap_startdatum date,
    OUT check_date date,
    OUT r bigint)
  RETURNS SETOF record AS
$BODY$
BEGIN
	RETURN QUERY
	SELECT ml.partner id, p.create_date::date create_date, ml.date_from, SQ3.check_date, SQ3.r_max r
	FROM res_partner p
	JOIN membership_membership_line ml ON p.id = ml.partner
	---------------
	-- SQ3: checkdate ophalen
	---------------
	JOIN 	(SELECT SQ2.partner, SQ2.r_max, SQ2.ml_id, COALESCE(bsl.write_date::date,aml2.last_rec_date) check_date
		FROM
			-------------------------------------------
			-- SQ2: MAX(r) voor total_rows() te krijgen
			-------------------------------------------
			(SELECT SQ1.partner, MAX(r_) r_max, MAX(SQ1.id) ml_id
			FROM (
				---------------------------------------------------------------------
				-- SQ1: r (row_number) toewijzen aan elke membership_line per partner
				---------------------------------------------------------------------
				SELECT ml.partner, ROW_NUMBER() OVER (PARTITION BY ml.partner ORDER BY ml.id ASC) AS r_, ml.id	
				FROM membership_membership_line ml 
				--WHERE ml.partner = 296532
				--WHERE ml.partner = 233491
				--------------------------------------------------------------- SQ1 -
				) SQ1
			GROUP BY SQ1.partner) SQ2
			------------------------------------- SQ2 -
			JOIN membership_membership_line ml ON SQ2.ml_id = ml.id
			--factuur info
			JOIN account_invoice_line il ON il.id = ml.account_invoice_line
			JOIN account_invoice i ON i.id = il.invoice_id
			--parnter info
			LEFT OUTER JOIN res_partner a3 ON i.partner_id = a3.id
			--boeking info
			JOIN account_move_line aml1 ON aml1.move_id = i.move_id
			JOIN account_move_line aml2 ON aml2.reconcile_id = aml1.reconcile_id AND aml2.id <> aml1.id
			--RU
			LEFT OUTER JOIN account_bank_statement bs ON bs.id = aml2.statement_id AND (bs.state = 'confirm' AND (bs.name LIKE '%-221-%' OR bs.name LIKE '%-029-%'))
			LEFT OUTER JOIN account_bank_statement_line bsl ON bs.id = bsl.statement_id AND bsl.partner_id = ml.partner
			--product info
			JOIN product_product pp ON pp.id = ml.membership_id
		WHERE COALESCE(i.sdd_mandate_id,0) = 0 --geen nieuwe leden met mandaat/domi
		AND i.partner_id = i.membership_partner_id --geen nieuwe leden via afdeling (dan verschillen deze ID's)
		) SQ3
	------------------------------------- SQ3 -
	ON p.id = SQ3.partner
	WHERE p.membership_nbr < lidnummer AND (ml.create_date::date >= begindatum OR SQ3.check_date >= begindatum) AND (SQ3.check_date < now()::date)
		AND SQ3.r_max = 1

	UNION ALL

	SELECT ml.partner id, p.create_date::date create_date, ml.date_from, SQ3.check_date, SQ3.r_max r
	FROM res_partner p
	JOIN membership_membership_line ml ON p.id = ml.partner
	---------------
	-- SQ3: checkdate ophalen
	---------------
	JOIN 	(SELECT SQ2.partner, SQ2.r_max, SQ2.ml_id, COALESCE(ml.create_date::date,ml.date_from) check_date
		FROM	-------------------------------------------
			-- SQ2: MAX(r) voor total_rows() te krijgen
			-------------------------------------------
			(SELECT SQ1.partner, MAX(r_) r_max, MAX(SQ1.id) ml_id
			FROM (
				---------------------------------------------------------------------
				-- SQ1: r (row_number) toewijzen aan elke membership_line per partner
				---------------------------------------------------------------------
				SELECT ml.partner, ROW_NUMBER() OVER (PARTITION BY ml.partner ORDER BY ml.id ASC) AS r_, ml.id	
				FROM membership_membership_line ml 
				--WHERE ml.partner = 296532
				--WHERE ml.partner = 233491
				--WHERE ml.partner IN (305052,296532,50729)
				--------------------------------------------------------------- SQ1 -
				) SQ1
			GROUP BY SQ1.partner) SQ2
			------------------------------------- SQ2 -
			JOIN membership_membership_line ml ON SQ2.ml_id = ml.id
			--factuur info
			JOIN account_invoice_line il ON il.id = ml.account_invoice_line
			JOIN account_invoice i ON i.id = il.invoice_id 
			--parnter info
			LEFT OUTER JOIN res_partner a3 ON i.partner_id = a3.id
			--mandaat info
			LEFT OUTER JOIN (SELECT pb.id pb_id, pb.partner_id pb_partner_id, sm.id sm_id, sm.state sm_state FROM res_partner_bank pb JOIN sdd_mandate sm ON sm.partner_bank_id = pb.id WHERE sm.state = 'valid') sm ON pb_partner_id = ml.partner
			--product info
			JOIN product_product pp ON pp.id = ml.membership_id
		WHERE pp.membership_product  --AND i.state = 'paid'
			AND ((COALESCE(i.partner_id,0) <> 0 AND COALESCE(a3.organisation_type_id,0) = 1 )
				OR (COALESCE(i.sdd_mandate_id,0) = COALESCE(sm.sm_id,1) AND sm.sm_state = 'valid'))) SQ3
	------------------------------------- SQ3 -
	ON p.id = SQ3.partner
	WHERE p.membership_nbr < lidnummer AND SQ3.check_date >= begindatum AND SQ3.check_date < now()::date
		AND SQ3.r_max = 1;
 
END; 
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION public._crm_ledenoudepartnernieuwlid(text, date)
  OWNER TO axelvandencamp;
