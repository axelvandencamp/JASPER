-- Function: public._crm_leden5j_test(text, date)

-- DROP FUNCTION public._crm_leden5j_test(text, date);

CREATE OR REPLACE FUNCTION public._crm_leden5j(
    IN lidnummer text,
    IN begindatum date,
    OUT id integer,
    OUT lidmaatschap_startdatum date,
    OUT check_date date,
    OUT date_diff double precision,
    OUT sm_ref character varying,
    OUT aml1_id integer,
    OUT startdatum date)
  RETURNS SETOF record AS
$BODY$
BEGIN
	RETURN QUERY 
	SELECT partner, max_date_from, 
		COALESCE(COALESCE(bsl.write_date::date,aml2.last_rec_date),COALESCE(sm.signature_date,'1900-01-01')) check_date, datediff, sm.sm_ref, MAX(aml1.id) aml1_id, begindatum
	--SELECT *
	FROM	(
		SELECT SQ3.*, ml.account_invoice_line, ml.membership_id
		FROM	(
			SELECT MIN(date_to) min_date_to, MAX(date_from) max_date_from, MAX(date_to) max_date_to, date_part('year',age(MIN(date_to), MAX(date_from))) datediff, SQ2.membership_nbr, SQ2.partner, MAX(SQ2.id) ml_id
			FROM	(
				SELECT   * 
				FROM 	(
					SELECT ROW_NUMBER() OVER (PARTITION BY ml.partner ORDER BY date_from DESC) AS r, ml.partner, p.membership_nbr, ml.create_date::date date_from, ml.date_to, ml.id
					FROM membership_membership_line ml
						JOIN res_partner p ON ml.partner = p.id
						JOIN product_product pp ON ml.membership_id = pp.id
					WHERE ml.state IN ('paid','invoiced','canceled') AND pp.membership_product--AND NOT(p.membership_state = 'wait_member')
						--AND p.id = 176669
					) SQ1
				WHERE
				  SQ1.r <= 2
				) SQ2
			GROUP BY partner, SQ2.membership_nbr
			) SQ3
			JOIN membership_membership_line ml ON ml.id = SQ3.ml_id--, SQ2.account_invoice_line, SQ2.membership_id
		) SQ4
		--factuur info
		JOIN account_invoice_line il ON il.id = SQ4.account_invoice_line
		JOIN account_invoice i ON i.id = il.invoice_id
		--parnter info
		LEFT OUTER JOIN res_partner a3 ON i.partner_id = a3.id
		--boeking info
		JOIN account_move_line aml1 ON aml1.move_id = i.move_id
		LEFT OUTER JOIN account_move_line aml2 ON aml2.reconcile_id = aml1.reconcile_id AND aml2.id <> aml1.id
		--RU
		LEFT OUTER JOIN account_bank_statement bs ON bs.id = aml2.statement_id AND (bs.state = 'confirm' AND (bs.name LIKE '%-221-%' OR bs.name LIKE '%-029-%'))
		LEFT OUTER JOIN account_bank_statement_line bsl ON bs.id = bsl.statement_id AND bsl.partner_id = SQ4.partner
		--product info
		JOIN product_product pp ON pp.id = SQ4.membership_id
		--mandaat info
		LEFT OUTER JOIN (SELECT pb.id pb_id, pb.partner_id pb_partner_id, sm.id sm_id, sm.signature_date, sm.unique_mandate_reference sm_ref, sm.state sm_state FROM res_partner_bank pb JOIN sdd_mandate sm ON sm.partner_bank_id = pb.id WHERE sm.state = 'valid') sm ON pb_partner_id = SQ4.partner
	WHERE 	datediff < -5
		--AND max_date_from >= '2015-01-01'
		AND (max_date_from >= begindatum
			AND COALESCE(COALESCE(bsl.write_date::date,aml2.last_rec_date),COALESCE(sm.signature_date,'1900-01-01')) >= begindatum)
	GROUP BY partner, max_date_from, COALESCE(COALESCE(bsl.write_date::date,aml2.last_rec_date),COALESCE(sm.signature_date,'1900-01-01')), datediff, sm.sm_ref;
	 
END; 
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION public._crm_leden5j(text, date)
  OWNER TO axelvandencamp;
GRANT EXECUTE ON FUNCTION public._crm_leden5j(text, date) TO public;
GRANT EXECUTE ON FUNCTION public._crm_leden5j(text, date) TO axelvandencamp;
